#!/usr/bin/env python3

import argparse
import subprocess
import os
import shutil

def exec(cmd):
	proc = subprocess.Popen(cmd, shell=True, text=True)
	proc.communicate()

def make_parser():
    parser = argparse.ArgumentParser(
        prog='ld', 
        description='Common linode dev commands'
    )
    
    subparsers = parser.add_subparsers(
        dest='command', 
        help='Available subcommands'
    )
    
    ## Query ##

    parser_db = subparsers.add_parser('db', help='Execute a db command')
    parser_db.add_argument('query', help='The db command to execute')
    

    ## Start Env ##

    subparsers.add_parser('start', help='Start the env')
    
    ## Tail Logs ##

    parser_logs = subparsers.add_parser('logs', help='Tail logs for a container')
    parser_logs.add_argument('container',       help='The container to view logs for')


    ## Attach to Bash ##

    parser_attach = subparsers.add_parser('attach', help='Attach to a container')
    parser_attach.add_argument('container',         help='The container to attach to')

    ## Execute a Bash Command ##

    parser_attach = subparsers.add_parser('exec', help='Execute a bash command in a container')
    parser_attach.add_argument('container',       help='The container to exec in')
    parser_attach.add_argument('cmd',             help='The command to run')

    ## Rename config.ini files ##

    parser_config_rename = subparsers.add_parser('renameconfig', help='Renaming config.ini.example -> config.ini')

    return parser

def cmd_db(args):
    exec(f"docker compose exec -it db mysql hosting --user=root --password=r1r1r1 -P 5033 --silent --execute '{args.query}'")

def cmd_start():
    exec("~/cometlab-setup/start.sh")

def cmd_attach(args):
    exec(f"docker exec -it {args.container} bash")

def cmd_exec(args):
    exec(f"docker exec {args.container} {args.cmd}")

def cmd_logs(args):
    print(f"TODO {args.container}")

def cmd_rename_config():
      PATH = "/home/vvelecho/cometlab-setup/devenv/repos"
      os.chdir(PATH)

      dirs = []

      for (_, dirnames, _) in os.walk(PATH):
          dirs.extend(dirnames)
          break

      for dir in dirs:
          fp = f"./{dir}/config.ini.example"
          fp_dest = f"./{dir}/config.ini"

          if os.path.isfile(fp):
              shutil.copyfile(fp, fp_dest)

def main():
    parser = make_parser()
    
    args = parser.parse_args()
    
    if   args.command == 'db':
        cmd_db(args)
    elif args.command == 'start':
        cmd_start()
    elif args.command == 'attach':
        cmd_attach(args)
    elif args.command == 'exec':
        cmd_exec(args)
    elif args.command == 'logs':
        cmd_logs(args)
    elif args.command == 'renameconfig':
        cmd_rename_config()
    else:
        parser.print_help()

if __name__ == '__main__':
    main()

