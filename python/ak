#!/usr/bin/env python3

import sys
import subprocess

def help():
	print("Examples:")

	print("\n// Restart services\n")
	print("ak rs sc")
	print("ak rs gh")

	print("\n// Check services\n")
	print("ak ck sc")

	print("\n// Metadata updates")
	print("ak mu pearl")
	print("ak mu billingpearl")
	print("ak mu all")

	print("\n// Clear log files")
	print("ak clr sc")

	print("\n// Verbose logging")
	print("ak vb sc")
	print("ak vb gh STRMCLD")

	print("\n// Tail logfile")
	print("ak tail stormlet.log")

	print("\n// Flush metrics")
	print("ak flushmetrics")

	print("\n// Print metrics")
	print("ak printmetrics stormlet_javascript_event_handlers")

	print("")

def exec(cmd):
	subprocess.run(cmd, shell=True, text=True, check=True)

def akamai_run(subcommand, args):
	if len(args) < 1:
		help()
		exit(1)

	svc = args[0]

	if svc == 'sc':
		service = 'stormcloud'
	elif svc == 'gh':
		service = 'webghost'
	else:
		print("Unknown service")
		exit(1)

	exec(f'/a/sbin/akamai_run {subcommand} {service}')

def metaupdate(args):
	for arg in args:
		if arg == 'pearl':
			exec('curl -v -sX AKAMAI_META_UPDATE http://127.0.0.1/7/7/7/pearl.data/127.0.0.1/usr/local/akamai/etc/ghost/pearl.data/ew_pearls.xml')
		elif arg == 'billingpearl':
			exec('curl -v -sX AKAMAI_META_UPDATE http://127.0.0.1/7/7/7/pearl.data/127.0.0.1/usr/local/akamai/etc/ghost/pearlbilling.data/ew_billingpearls.xml')
		elif arg == "all":
			exec("curl -i -X AKAMAI_META_UPDATE http://127.0.0.1/7/7/7/arl.data/stager.akamai.com/usr/local/akamai/etc/ghost/arl.data/www.v21.ewtest.example.xml; curl -i -X AKAMAI_META_UPDATE http://127.0.0.1/7/7/7/arl.data/stager.akamai.com/usr/local/akamai/etc/ghost/arl.data/ARL_edgeworkers-put-delete-options-2022-01-20.200155153.xml; curl -v -sX AKAMAI_META_UPDATE http://127.0.0.1/7/7/7/pearl.data/127.0.0.1/usr/local/akamai/etc/ghost/pearl.data/ew_pearls.xml; curl -v -sX AKAMAI_META_UPDATE http://127.0.0.1/7/7/7/pearl.data/127.0.0.1/usr/local/akamai/etc/ghost/baseline.data/baseline-hacks.xml; curl -i -X AKAMAI_META_UPDATE http://127.0.0.1/7/7/7/arl.data/stager.akamai.com/usr/local/akamai/etc/ghost/arl.data/ARL_edgeworkers-put-delete-options-2022-01-20.200155153.xml")
		else:
			print('Unknown metadata update property')
			exit(1)

if len(sys.argv) < 2:
	help()
	exit(1)

def tail(args):
	if len(args) < 1:
		help()
		exit(1)

	file = args[0]

	known_files = {
		'stormlet.log'		: '/a/logs/stormcloud/stormlet_javascript/stormlet.log',
		'stormcloud.log'	: '/a/logs/stormcloud/stormcloud.log',
		'stormcloud.out'	: '/a/logs/stormcloud/stormcloud.out',
		'ghost.access.log'	: '/a/logs/ghost.access.log',
		'cache.log'			: '/a/logs/cache.log',
		'ghost.ddc.log'		: '/a/logs/ghost.ddc.log',
		'load_stats.log'	: '/a/logs/stormcloud/stormlet_javascript/load_stats.log',
	}

	if file not in known_files:
		keys = "\n".join(list(known_files.keys()))

		print("Unknown logfile...\n")
		print(f"Known log files: \n\n{keys}")

		exit(1)
	
	file = known_files[file]

	exec(f'tail -n0 -f {file}')

def verbose(args):
	if len(args) < 1:
		help()
		exit(1)
	
	svc = args[0]

	if svc == 'sc':
		verbose_sc()
	elif svc == 'gh':
		verbose_gh(args[1:])
	else:
		print("Unknown service")
		exit(1)

def verbose_sc():
	with open("/a/etc/akamai.conf", "r") as file:
		lines = file.readlines()

	filtered = [ line for line in lines if "STORMCLOUD_LOG_LEVEL" not in line ]
	filtered.append("STORMCLOUD_LOG_LEVEL=debug; export STORMCLOUD_LOG_LEVEL")

	with open("/a/etc/akamai.conf", "w") as file:
		file.writelines(filtered)

def verbose_gh(args):
	if len(args) < 1:
		args = ["HTTP","CLIENT","FWD","STRMCLD","SSL","CRYPTO","CERT"]

	for arg in args:
		exec(f'echo "debugsection set global section {arg} level 10 timeout 3600" | /a/bin/ouiji')

def flush_metrics():
	exec("ps aux | grep stormrunner_javascript | grep -v grep | awk '{ print $2; }' | xargs kill -SIGUSR1")

def print_metrics(args):
	if len(args) < 1:
		print("Missing tablename")
		exit(1)

	tablename = args[0]

	exec(f"cat /a/stormcloud/stormlets/release/deployed/stormlet_javascript@0.0.0/writable_dir/metrics/{tablename}.csv | sed 1,5d")

cmd  = sys.argv[1]
args = sys.argv[2:]

if cmd == 'rs':
	akamai_run('restart', args)
elif cmd == 'ck':
	akamai_run('check', args)
elif cmd == "mu":
	metaupdate(args)
elif cmd == "tail":
	tail(args)
elif cmd == "vb":
	verbose(args)
elif cmd == "flushmetrics":
	flush_metrics()
elif cmd == "printmetrics":
	print_metrics(args)
else:
	print("Unknown command")
	exit(1)

